
/*
 * Creates a new post according to the specified arguments.
 */
.arguments
   topic:string
   parent:long
   content:string
   visibility:string
.description:Creates a new post according to the specified arguments.


/*
 * Sanity checking invocation.
 */
auth.ticket.verify


/*
 * Connecting to database.
 */
data.connect:[generic|anarq]
   database-type:mysql


   /*
    * We'll need the username of the currently authenticated user
    * further down as we insert item.
    */
   auth.ticket.get


   /*
    * Creating a transation object two wrap both insert and update inside of,
    * to avoid race conditions when trying to retrieve post afterwards, resulting
    * in returning wrong path for post.
    */
   data.transaction.create
      database-type:mysql


      /*
       * Parametrising create invocation.
       */
      add:x:+/*/values
         get-nodes:x:@.arguments/*


      /*
       * Invoking create slot.
       */
      data.create
         database-type:mysql
         table:posts
         return-id:bool:true
         values
            user:x:@auth.ticket.get

      /*
       * Figuring out materialised path for item.
       */
      .path
      if
         exists:x:@.arguments/*/parent
         .lambda


            /*
             * Not a root post, hence retrieving parent's path.
             */
            data.read
               database-type:mysql
               table:posts
               columns
                  path
               where
                  and
                     id:x:@.arguments/*/parent
            if
               not
                  exists:x:@data.read/*/*/path
               .lambda


                  /*
                   * Parent item doesn't exist.
                   */
                  throw:Not found
                     status:404
                     public:true


            /*
             * Making sure path for item is prefixed with parent's path.
             */
            set-value:x:@.path
               get-value:x:@data.read/*/*/path


      /*
       * Concatenating current item's ID to path
       */
      set-value:x:@.path
         strings.concat
            get-value:x:@.path
            .:/
            format:x:@data.create
               pattern:"{0:00000}"


      /*
       * Updating item now that we have its complete path.
       */
      data.update
         database-type:mysql
         table:posts
         where
            and
               id:x:@data.create
         values
            path:x:@.path


      /*
       * Committing transaction.
       */
      data.transaction.commit
         database-type:mysql


      /*
       * Returning results of invocation to caller.
       */
      unwrap:x:+/*
      return
         id:x:@data.create
