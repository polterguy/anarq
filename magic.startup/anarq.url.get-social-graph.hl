
/*
 * Creates the slot responsible for retrieving Social Graph data from URL.
 *
 * Arguments;
 *
 * - url
 */
slots.create:anarq.url.get-social-graph


   /*
    * Sanity checking invocation.
    */
   validators.mandatory:x:@.arguments/*/url


   /*
    * Fetching URL.
    */
   http.get:x:@.arguments/*/url


   /*
    * Sanity checking result, to make sure it's HTML.
    */
   if
      not
         strings.contains:x:@http.get/*/headers/*/Content-Type
            .:text/html
      .lambda


         /*
          * Caller tried to add a link to something not being an HTML page.
          */
         throw:Only provide links to HTML pages please
            public:bool:true
            status:int:400


   /*
    * Checking to see if we can find Open Graph tags.
    */
   .og
   html2lambda:x:@http.get/*/content
   unwrap:x:+/*/*
   add:x:@.og
      .
         title:x:@"@html2lambda/**/head/**/\@property/""=og:title""/./*/\@content/[0,1]"
         url:x:@"@html2lambda/**/head/**/\@property/""=og:url""/./*/\@content/[0,1]"
         description:x:@"@html2lambda/**/head/**/\@property/""=og:description""/./*/\@content/[0,1]"
         image:x:@"@html2lambda/**/head/**/\@property/""=og:image""/./*/\@content/[0,1]"


   /*
    * HTML to return to caller.
    */
   .html:"<!-- Open Graph -->\r\n"


   /*
    * Checking if we Open Graph tags contained image.
    */
   if
      or
         eq
            get-value:x:@.og/*/image
            .
         eq
            get-value:x:@.og/*/image
            .:
      .lambda
         set-value:x:@.og/*/image
            .:/assets/anarq.png


   /*
    * Checking if we found any Open Graph tags.
    */
   if
      exists:x:@.og/*
      .lambda


         /*
          * We found at least one Open Graph tag in document.
          * Adding OG card to HTML.
          */
         set-value:x:@.html
            strings.concat
               get-value:x:@.html
               .:@"<div class=""card"">"


         /*
          * Adding URL to HTML.
          */
         set-value:x:@.html
            strings.concat
               get-value:x:@.html
               .:@"<a href="""
               get-value:x:@.og/*/url
               .:@""">"


         /*
          * Appending title into HTML.
          */
         set-value:x:@.html
            strings.concat
               get-value:x:@.html
               .:<h3>
               get-value:x:@.og/*/title
               .:</h3>


         /*
          * Appending image tag into HTML.
          */
         set-value:x:@.html
            strings.concat
               get-value:x:@.html
               .:@"<img src="""
               get-value:x:@.og/*/image
               .:@""">"


         /*
          * Appending description into HTML.
          */
         set-value:x:@.html
            strings.concat
               get-value:x:@.html
               .:<p>
               get-value:x:@.og/*/description
               .:</p>


         /*
          * Appending closing tag into HTML.
          */
         set-value:x:@.html
            strings.concat
               get-value:x:@.html
               .:</a></div>

   else


      /*
       * We didn't find any Open Graph tags in document.
       */
      set-value:x:@.html
         strings.concat
            get-value:x:@.html
            .:@"<div class=""card"">"


      /*
       * Adding URL to HTML.
       */
      set-value:x:@.html
         strings.concat
            get-value:x:@.html
            .:@"<a href="""
            get-value:x:@.og/*/url
            .:@""">Read the article here</a></div>"


   /*
    * Adding end of Open Graph comment to markdown.
    */
   set-value:x:@.html
      strings.concat
         get-value:x:@.html
         .:"<!-- End of Open Graph -->\r\n\r\n"


   /*
    * Returning whatever we found.
    */
   return-value:x:@.html
