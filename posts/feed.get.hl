
/*
 * Returns all top level posts matching the specified argument(s) to caller.
 */
.arguments
   limit:long
   offset:long
   topic:string
   username:string
   minutes:int
.description:Returns all top level posts matching the specified argument(s) to caller allowing caller to page results, sorting according to number of likes, allowing caller to extract posts not older than a specified amount of minutes


/*
 * Sanity checking invocation.
 */
validators.integer:x:@.arguments/*/limit
   min:1
   max:100


/*
 * Verifying user has not been blocked from site.
 */
auth.ticket.get
unwrap:x:+/*
signal:anarq.users.verify-access
   user:x:@auth.ticket.get


/*
 * Connecting to database
 */
data.connect:[generic|anarq]
   database-type:mysql


   /*
    * Parametrising invocation.
    */
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset


   /*
    * Checking if caller wants to filter according to username.
    */
   if
      exists:x:@.arguments/*/username
      .lambda

         /*
          * Username explicitly specified as filtering condition.
          */
         unwrap:x:+/*/*
         add:x:@data.connect/*/data.read/*/where/*/and
            .
               p.user.eq:x:@.arguments/*/username


   /*
    * Checking if caller wants to filter according to topic.
    */
   if
      exists:x:@.arguments/*/topic
      .lambda

         /*
          * Topic explicitly specified as filtering condition.
          */
         unwrap:x:+/*/*
         add:x:@data.connect/*/data.read/*/where/*/and
            .
               p.topic.eq:x:@.arguments/*/topic


   /*
    * Checking if user is authenticated and has confirmed his email,
    * and if not we only return public posts.
    */
   if
      auth.ticket.in-role:root, admin, moderator, guest
      .lambda


         /*
          * Making sure we return public and protected posts.
          */
         add:x:@data.connect/*/data.read/*/where/*/and
            .
               or
                  p.visibility.eq:public
                  p.visibility.eq:protected

   else


      /*
       * Making sure we only return public and protected posts.
       */
      add:x:@data.connect/*/data.read/*/where/*/and
         .
            p.visibility.eq:public


   /*
    * Checking if user only wants to see posts for the last n minutes.
    */
   if
      exists:x:@.arguments/*/minutes
      .lambda


         /*
          * User only want to see posts created during the last n minutes.
          */
         math.subtract
            date.now
            time
               minutes:x:@.arguments/*/minutes
         unwrap:x:+/*/*
         add:x:@data.connect/*/data.read/*/where/*/and
            .
               p.created.mt:x:@math.subtract


   /*
    * Invoking read slot.
    */
   data.read
      database-type:mysql
      table:posts
         as:p
         join:likes
            as:l
            type:left
            on
               and
                  p.id:l.post_id
      columns
         p.id
         p.topic
         p.created
         p.user
            as:user
         p.visibility
         substring(p.content, 1, 50)
            as:excerpt
         count(l.post_id)
            as:likes
      where
         and
            p.parent.eq
      group
         p.id
      order:likes
         direction:desc
      order:p.created
         direction:desc


   /*
    * Verifying above actually returned anything at all.
    */
   if
      not
         exists:x:@data.read/*/*
      .lambda
         response.status.set:404
         return-nodes
            message:"No such posts were found"


   /*
    * Returns result to caller.
    */
   return-nodes:x:@data.read/*
