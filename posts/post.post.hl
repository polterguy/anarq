
/*
 * Creates a new post according to the specified arguments.
 */
.arguments
   visibility:string
   topic:string
   content:string
   hyperlink:string
.description:Creates a new OP post according to the specified arguments.


/*
 * Sanity checking invocation.
 */
auth.ticket.verify:root, admin, guest, moderator
validators.enum:x:@.arguments/*/visibility
   .:public
   .:friends
unwrap:x:+/*
signal:anarq.html.safeguard
   content:x:@.arguments/*/content


/*
 * Verifying user has not been blocked from site.
 */
auth.ticket.get
unwrap:x:+/*
signal:anarq.users.verify-access
   user:x:@auth.ticket.get


/*
 * Checking if hyperlink was given, and if so,
 * retrieving social graph information for URL.
 */
if
   and
      exists:x:@.arguments/*/hyperlink
      not
         eq
            get-value:x:@.arguments/*/hyperlink
            .:
      not
         eq
            get-value:x:@.arguments/*/hyperlink
            .
   .lambda


      /*
       * Invoking slot responsible for fetching social graph data for URL.
       */
      unwrap:x:+/*
      signal:anarq.url.get-social-graph
         url:x:@.arguments/*/hyperlink
      set-value:x:@.arguments/*/content
         strings.concat
            get-value:x:@.arguments/*/content
            get-value:x:@signal


   /*
    * Removing [hyperlink] argument to prevent it from being
    * attempted to be inserted into database.
    */
   remove-nodes:x:@.arguments/*/hyperlink


/*
 * Connecting to database.
 */
data.connect:[generic|anarq]
   database-type:mysql


   /*
    * Creating a transation object two wrap both insert and update inside of,
    * to avoid race conditions when trying to retrieve post afterwards, resulting
    * in returning wrong path for post.
    */
   data.transaction.create
      database-type:mysql


      /*
       * Parametrising create invocation.
       */
      add:x:./*/data.create/*/values
         get-nodes:x:@.arguments/*


      /*
       * Invoking create slot.
       */
      data.create
         database-type:mysql
         table:posts
         return-id:bool:true
         values
            user:x:@auth.ticket.get


      /*
       * Concatenating current item's ID to path
       */
      .path
      set-value:x:@.path
         strings.concat
            .:/
            format:x:@data.create
               pattern:"{0:000000000}"


      /*
       * Updating item now that we have its complete path.
       */
      data.update
         database-type:mysql
         table:posts
         where
            and
               id:x:@data.create
         values
            path:x:@.path


      /*
       * Committing transaction.
       */
      data.transaction.commit
         database-type:mysql


      /*
       * Returning results of invocation to caller.
       */
      unwrap:x:+/*
      return
         id:x:@data.create
