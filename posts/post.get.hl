
/*
 * Returns a single OP post.
 */
.arguments
   id:long
.description:Returns a single OP post.


/*
 * Sanity checking invocation.
 */
validators.mandatory:x:@.arguments/*/id


/*
 * Verifying user has not been blocked from site.
 */
auth.ticket.get
if
   not
      eq
         get-value:x:@auth.ticket.get
         .
   .lambda
      unwrap:x:+/*
      signal:anarq.users.verify-access
         user:x:@auth.ticket.get


/*
 * Connecting to database
 */
data.connect:[generic|anarq]
   database-type:mysql


   /*
    * Checking if user is authenticated and has confirmed his email,
    * and if not we only return public posts.
    */
   if
      auth.ticket.in-role:root, admin, moderator, guest
      .lambda


         /*
          * Making sure we return public and protected posts.
          */
         add:x:@data.connect/*/data.read/*/where/*/and
            .
               or
                  p.visibility.eq:public
                  p.visibility.eq:friends


         /*
          * Checking if caller should have access to moderated posts.
          */
         if
            auth.ticket.in-role:root, admin, moderator
            .lambda
               add:x:@data.connect/*/data.read/*/where/*/and/*/or
                  .
                     p.visibility.eq:moderated

   else


      /*
       * Making sure we only return public and protected posts.
       */
      add:x:@data.connect/*/data.read/*/where/*/and
         .
            p.visibility.eq:public


   /*
    * Invoking read slot.
    */
   data.read
      database-type:mysql
      table:posts
         as:p
         join:likes
            as:l
            type:left
            on
               and
                  p.id:l.post_id
      columns
         p.id
         p.topic
         p.created
         p.user
            as:user
         p.visibility
         p.content
         count(l.post_id)
            as:licks
      where
         and
            p.parent.eq
            p.id.eq:x:@.arguments/*/id
      group
         p.id
      order:p.created
         direction:desc


   /*
    * Verifying above actually returned anything at all.
    */
   if
      not
         exists:x:@data.read/*/*
      .lambda
         response.status.set:404
         return-nodes
            message:"No such post was found"


   /*
    * Returns result to caller.
    */
   return-nodes:x:@data.read/*/*
