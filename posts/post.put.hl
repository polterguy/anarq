
/*
 * Updating an existing OP post according to the specified argument(s).
 */
.arguments
   id:long
   content:string
   topic:string
   visibility:string
   hyperlink:string
.description:Updates an existing OP post according to the specified arguments


/*
 * Sanity checking invocation.
 */
validators.mandatory:x:@.arguments/*/id
validators.enum:x:@.arguments/*/visibility
   .:public
   .:protected
unwrap:x:+/*
signal:anarq.html.safeguard
   content:x:@.arguments/*/content
auth.ticket.verify


/*
 * Verifying user has not been blocked from site.
 */
auth.ticket.get
unwrap:x:+/*
signal:anarq.users.verify-access
   user:x:@auth.ticket.get


/*
 * Checking if hyperlink was given, and if so,
 * retrieving social graph information for URL.
 */
if
   and
      exists:x:@.arguments/*/hyperlink
      not
         eq
            get-value:x:@.arguments/*/hyperlink
            .:
      not
         eq
            get-value:x:@.arguments/*/hyperlink
            .
   .lambda


      /*
       * Invoking slot responsible for fetching social graph data for URL.
       */
      unwrap:x:+/*
      signal:anarq.url.get-social-graph
         url:x:@.arguments/*/hyperlink
      set-value:x:@.arguments/*/content
         strings.concat
            get-value:x:@signal
            get-value:x:@.arguments/*/content


      /*
       * Removing [hyperlink] argument to prevent it from being
       * attempted to be inserted into database.
       */
      remove-nodes:x:@.arguments/*/hyperlink


/*
 * Connecting to database.
 */
data.connect:[generic|anarq]
   database-type:mysql


   /*
    * Parametrising invocation.
    */
   add:x:@data.connect/*/data.update/*/values
      get-nodes:x:@.arguments/*/visibility
      get-nodes:x:@.arguments/*/content
      get-nodes:x:@.arguments/*/topic


   /*
    * Checking if user is not admin, and if so, making sure user can only update
    * his own posts.
    */
   if
      not
         auth.ticket.in-role:admin, root, moderator
      .lambda


         /*
          * Ensuring non-admin/moderator/root users can only update their own posts.
          */
         add:x:@data.connect/*/data.update/*/where/*/and
            .
               user.eq:x:@auth.ticket.get


   /*
    * Invoking update slot.
    */
   data.update
      database-type:mysql
      table:posts
      values
      where
         and
            id.eq:x:@.arguments/*/id


   /*
    * Returning results to caller.
    */
   unwrap:x:+/*
   return
      affected:x:@data.update
