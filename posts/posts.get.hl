
/*
 * Returns all top level posts matching the specified argument(s) to caller.
 */
.arguments
   limit:long
   offset:long
   topic.eq:string
   user.eq:string
.description:Returns all top level posts matching the specified argument(s) to caller allowing caller to page results


/*
 * Sanity checking invocation.
 */
validators.integer:x:@.arguments/*/limit
   min:1
   max:100


/*
 * Connecting to database
 */
data.connect:[generic|anarq]
   database-type:mysql


   /*
    * Parametrising invocation.
    */
   add:x:@data.connect/*/data.read
      get-nodes:x:@.arguments/*/limit
      get-nodes:x:@.arguments/*/offset
   remove-nodes:x:@.arguments/*/limit
   remove-nodes:x:@.arguments/*/offset
   add:x:@data.connect/*/data.read/*/where/*
      get-nodes:x:@.arguments/*


   /*
    * Checking if user is authenticated, and if not we only return public posts.
    */
   auth.ticket.get
   if
      eq
         get-value:x:@auth.ticket.get
         .
      .lambda


         /*
          * Making sure we only return public posts.
          */
         add:x:@data.connect/*/data.read/*/where/*/and
            .
               visibility.eq:public

   else


      /*
       * Making sure we only return public and protected posts.
       */
      add:x:@data.connect/*/data.read/*/where/*/and
         .
            or
               visibility.eq:public
               visibility.eq:protected


   /*
    * Invoking read slot.
    */
   data.read
      database-type:mysql
      table:posts
         join:likes
            type:left
            on
               and
                  posts.id:likes.post_id
      columns
         id
         topic
         created
         posts.user
            as:user
         visibility
         count(post_id)
            as:likes
      where
         and
            parent
      group
         id


   /*
    * Returns result to caller.
    */
   return-nodes:x:@data.read/*
