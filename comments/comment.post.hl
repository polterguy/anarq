
/*
 * Creates a new comment according to the specified arguments.
 */
.arguments
   parent:long
   content:string
.description:Creates a new comment either for a top level OP post or as a reply to another comment


/*
 * Sanity checking invocation.
 */
auth.ticket.verify
validators.mandatory:x:@.arguments/*/parent
validators.mandatory:x:@.arguments/*/content
validators.enum:x:@.arguments/*/visibility
   .:public
   .:friends
unwrap:x:+/*
signal:anarq.html.safeguard
   content:x:@.arguments/*/content


/*
 * We'll need to store ID of post such that we can return it to caller.
 */
.id


/*
 * We'll need to store username of OP such that we can send him
 * email informing him he's got a comment.
 */
.op-username


/*
 * Verifying user has not been blocked from site.
 */
auth.ticket.get
unwrap:x:+/*
signal:anarq.users.verify-access
   user:x:@auth.ticket.get


/*
 * Connecting to database.
 */
data.connect:[generic|anarq]
   database-type:mysql


   /*
    * Creating a transation object two wrap both insert and update inside of,
    * to avoid race conditions when trying to retrieve post afterwards, resulting
    * in returning wrong path for post.
    */
   data.transaction.create
      database-type:mysql


      /*
       * Figuring out materialised path for item.
       */
      data.read
         database-type:mysql
         table:posts
         columns
            path
            topic
            visibility
            user
         where
            and
               id.eq:x:@.arguments/*/parent
               visibility.neq:moderated


      /*
       * Storing username of OP such that we can send OP an email informing him he's
       * got a comment on one of his posts.
       */
      set-value:x:@.op-username
         get-value:x:@data.read/*/*/user


      /*
       * Verifying parent item exists.
       */
      if
         not
            exists:x:@data.read/*/*/path
         .lambda


            /*
             * Parent item doesn't exist.
             * Notice, this will rollback transaction.
             */
            response.status.set:404
            return-nodes
               result:false
               message:Parent post does not exist


      /*
       * Parametrising create invocation.
       */
      add:x:./*/data.create/*/values
         get-nodes:x:@.arguments/*


      /*
       * Invoking create slot.
       */
      data.create
         database-type:mysql
         table:posts
         return-id:bool:true
         values
            user:x:@auth.ticket.get
            topic:x:@data.read/*/*/topic
            visibility:x:@data.read/*/*/visibility


      /*
       * Storing ID of post such that we can return it to caller.
       */
      set-value:x:@.id
         get-value:x:@data.create


      /*
       * Making sure path for item is prefixed with parent's path,
       * in addition to its own ID value.
       */
      .path
      set-value:x:@.path
         strings.concat
            get-value:x:@data.read/*/*/path
            .:/
            format:x:@data.create
               pattern:"{0:000000000}"


      /*
       * Updating item now that we have its complete path.
       */
      data.update
         database-type:mysql
         table:posts
         where
            and
               id:x:@data.create
         values
            path:x:@.path


      /*
       * Committing transaction.
       */
      data.transaction.commit
         database-type:mysql


/*
 * Sending email to OP informing him that he's got a comment on his post.
 */
unwrap:x:+/*
signal:anarq.emails.comment-received
   comment:x:@.arguments/*/content
   post:x:@.arguments/*/parent
   op:x:@.op-username
   user:x:@auth.ticket.get


/*
 * Returning results of invocation to caller.
 */
unwrap:x:+/*
return
   id:x:@.id
