
/*
 * Registers a new user on the site.
 */
.arguments
   username:string
   password:string
   email:string
   full_name:string
   email-type:string
.description:Registers a new user on the site. Notice the user will not be allowed to post, comment or vote before he or she has confirmed the email address used to register on the page


/*
 * Sanity checking invocation.
 */
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/password
validators.mandatory:x:@.arguments/*/email
validators.mandatory:x:@.arguments/*/full_name
validators.email:x:@.arguments/*/email
validators.enum:x:@.arguments/*/email-type
   .:web
   .:client


/*
 * To avoid "funny" race conditions, having multiple threads trying to create
 * the same user simultaneously, registering the same email address at the same time,
 * etc - We must synchronise access to the entirety ot the insert operation, and also
 * double check if email address is already registered, before attempting to create user,
 * etc.
 */
semaphore:anarq.user.create


   /*
    * Before we create user, we need to check if email address is already taken,
    * at which point we don't proceed, but rather return an error to caller.
    */
   data.connect:[generic|anarq]


      /*
       * Invoking read slot to verify email is available.
       */
      data.read
         database-type:mysql
         table:user_details
         where
            and
               type:email
               content:x:@.arguments/*/email


      /*
       * Checking if email address is taken already.
       */
      if
         exists:x:@data.read/*/*
         .lambda


            /*
             * Making sure we return the correct error code to client.
             */
            response.status.set:400
            return-nodes
               error:Email address already registered


   /*
    * Creating user in main magic database.
    */
   unwrap:x:+/*
   signal:magic.auth.create-user
      username:x:@.arguments/*/username
      password:x:@.arguments/*/password
      roles
         .:unconfirmed


   /*
    * Connecting to database
    */
   data.connect:[generic|anarq]
      database-type:mysql


      /*
       * Invoking create slot to insert email address.
       */
      data.create
         database-type:mysql
         table:user_details
         values
            user:x:@.arguments/*/username
            type:email
            content:x:@.arguments/*/email


      /*
       * Invoking create slot to insert full name.
       */
      data.create
         database-type:mysql
         table:user_details
         values
            user:x:@.arguments/*/username
            type:full_name
            content:x:@.arguments/*/full_name


      /*
       * Now we need to send user his "confirm email address" email.
       *
       * Notice, users are not allowed to comment, like or post before they've confirmed
       * their email address. This is done to avoid spamming the site, and to provide at
       * least some minimum level of accountability.
       *
       * Notice, unless AnarQ is correctly configured, with (at least) a frontend URL,
       * there is no way we can send this email - Hence, checking for that first.
       */
      config.get:"anarq:frontend:url"
      if
         not
            eq
               get-value:x:@.config.get
               .
         .lambda


            /*
             * 'appSettings.json' has configured at least a frontend-url setting, hence
             * moving forward with attempting to send registration email to user.
             *
             * Concatenating user's email address with auth secret to create salted hash.
             */
            .secret
            set-value:x:@.secret
               strings.concat
                  get-value:x:@.arguments/*/email
                  config.get:"magic:auth:secret"
            set-value:x:@.secret
               crypto.hash:x:@.secret


            /*
             * Creating SHA256 hash of above result to make sure only person who read email
             * can confirm his email address.
             */
            .confirm-url
            set-value:x:@.confirm-url
               strings.concat
                  config.get:"anarq:frontend:url"
                  .:"/confirm-email"
                  .:?email=
                  strings.url-encode:x:@.arguments/*/email
                  .:&secret=
                  get-value:x:@.secret


            /*
             * Notice, we need to send different emails, depending upon what type of client the user
             * used to register. If the user came in through a web/HTML based client, we can send an
             * email with a hyperlink, leading him to a page allowing him to confirm his email.
             * If the user registered from a fat client, such as an iOS or Android app, we cannot
             * assume there even exists a webpage allowing him to verify his email address, hence
             * we send a different email, only with the secret.
             */
            .template-file
            switch:x:@.arguments/*/email-type
               case:web
                  set-value:x:@.template-file
                     .:/modules/anarq/data/emails/confirm-email.web.html
               case:client
                  set-value:x:@.template-file
                     .:/modules/anarq/data/emails/confirm-email.client.html


            /*
             * Sending user his "confirm email" email.
             */
            unwrap:x:+/**
            signal:magic.emails.send
               template-file:x:@.template-file
               name:x:@.arguments/*/full_name
               email:x:@.arguments/*/email
               subject:Confirm your email address to AnarQ please
               mime-type:text/plain
               substitutes
                  confirm-url:x:@.confirm-url
                  secret:x:@.secret


            /*
             * Verifying above invocation was a success.
             */
            if
               not
                  get-value:x:@signal
               .lambda


                  /*
                   * For some reasons email wasn't sent.
                   * Creating a log entry informing administrator of that fact.
                   */
                  log.error:"Registration email was not sent to user for some reasons"

      else


         /*
          * No frontend-url configuration setting found, making sure we log that fact,
          * to warn administrator of site about the fact.
          */
         log.error:"No 'anarq:frontend:url' setting found in 'appSettings.json' file, and hence we cannot send user a registration email. Please edit your appSettings.json file, and add the relavant AnarQ settings. No users registering at the site are being confirmed due to not being able to validate their email address before this is fixed."


      /*
       * Returns result to caller.
       */
      return-nodes
         result:success
