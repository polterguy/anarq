
/*
 * Registers a new user on the site.
 */
.arguments
   username:string
   password:string
   email:string
   full_name:string
.description:Registers a new user on the site


/*
 * Sanity checking invocation.
 */
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/password
validators.mandatory:x:@.arguments/*/email
validators.mandatory:x:@.arguments/*/full_name
validators.email:x:@.arguments/*/email


/*
 * To avoid "funny" race conditions, having multiple threads trying to create
 * the same user simultaneously, registering the same email address at the same time,
 * etc - We must synchronise access to the entirety ot the insert operation, and also
 * double check if email address is already registered, before attempting to create user,
 * etc.
 */
semaphore:anarq.user.create


   /*
    * Before we create user, we need to check if email address is already taken,
    * at which point we don't proceed, but rather return an error to caller.
    */
   data.connect:[generic|anarq]


      /*
       * Invoking read slot to verify email is available.
       */
      data.read
         database-type:mysql
         table:user_details
         where
            and
               type:email
               content:x:@.arguments/*/email


      /*
       * Checking if email address is taken already.
       */
      if
         exists:x:@data.read/*/*
         .lambda


            /*
             * Making sure we return the correct error code to client.
             */
            response.status.set:400
            return-nodes
               error:Email address already registered


   /*
    * Creating user in main magic database.
    */
   unwrap:x:+/*
   signal:magic.auth.create-user
      username:x:@.arguments/*/username
      password:x:@.arguments/*/password
      roles
         .:unconfirmed


   /*
    * Connecting to database
    */
   data.connect:[generic|anarq]
      database-type:mysql


      /*
       * Invoking create slot to insert email address.
       */
      data.create
         database-type:mysql
         table:user_details
         values
            user:x:@.arguments/*/username
            type:email
            content:x:@.arguments/*/email


      /*
       * Invoking create slot to insert full name.
       */
      data.create
         database-type:mysql
         table:user_details
         values
            user:x:@.arguments/*/username
            type:full_name
            content:x:@.arguments/*/full_name


      /*
       * Forking out a different thread to
       * send "confirm email address" email to user.
       */
      fork


         /*
          * Making sure we're able to trap exceptions.
          */
         unwrap:x:+/*/.email
         unwrap:x:+/*/.full_name
         try


            /*
             * Forward evaluated above [fork] invocation,
             * to allow us to have email address and full
             * name inside of [fork] invocation.
             */
            .email:x:@.arguments/*/email
            .full_name:x:@.arguments/*/full_name


            /*
             * Retrieving configuration settings, necessary to know from where we're
             * sending the email.
             */
            config.get:"anarq:emails:verify-email-subject"
            config.get:"anarq:frontend:url"
            config.get:"magic:auth.secret"


            /*
             * Concatenating user's email address with auth secret to create salted hash.
             */
            strings.concat
               get-value:x:@.email
               get-value:x:@config.get


            /*
             * Creating SHA256 hash of above result to make sure only person who read email
             * can confirm his email address.
             */
            crypto.hash:x:-
            .confirm-url
            set-value:x:-
               strings.concat
                  get-value:x:@config.get
                  .:?email=
                  strings.url-encode:x:@.email
                  .:&secret=
                  get-value:x:@crypto.hash


            /*
             * Making sure we get the "To" name correctly applied before sending email.
             */
            set-name:x:./*/mail.smtp.send/*/*/to/0
               get-value:x:@.full_name


            /*
             * Substituting email template.
             */
            unwrap:x:+/*/*
            signal:anarq.file.substituteanarq.file.substitute
               file:/modules/anarq/data/emails/confirm-email.txt
               substitutions
                   confirm-url:x:@.confirm-url


            /*
             * Sends "confirm email address" email to user.
             */
            unwrap:x:+/**
            mail.smtp.send
               message
                  to
                     .:x:@.email
                  subject:x:@try/*/config.get/[0,1]
                  entity:text/plain
                     content:x:@signal


            /*
             * Logging the fact that we successfulyl sent email to user.
             */
            log.info
               strings.concat
                  .:"Confirm email address email successfully sent to email address '"
                  get-value:x:@.email
                  .:"' with full name of '"
                  get-value:x:@.full_name
                  .:"'"

         .catch


            /*
             * Logging the fact that something went wrong.
             */
            log.debug
               lambda2hyper:x:../*
            log.error
               strings.concat
                  .:"Something went wrong as we tried to send 'confirm email' email to user, exception message was - '"
                  get-value:x:@.arguments/*/message
                  .:"'"


      /*
       * Returns result to caller.
       */
      return-nodes
         result:success
