
/*
 * Sets up authentication of system according to the arguments provided.
 */
.arguments
   databaseType:string
   rootUsername:string
   rootPassword:string
.description:"Sets up authentication of system according to the arguments provided."


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


// Logging.
strings.concat
   .:"Trying to setup up Magic with '"
   get-value:x:@.arguments/*/databaseType
   .:"' as authentication database type"
log.info:x:@strings.concat


/*
 * Verifying that system haven't already been setup with some secure
 * authentication scheme previously.
 */
log.info:Checking if system has already been setup previously
slots.get:magic.authenticate
if
   or
      not
         exists:x:@slots.get/*/.is-default-auth
      not
         eq
            get-value:x:@slots.get/*/.is-default-auth
            .:bool:true
   .lambda


      /*
       * This shouldn't really be possible, but for some reasons we ended
       * up here none the less.
       */
      log.info:System has apparently already been setup previously
      throw:Your system has already been configured to use a secure authentication scheme


// ... else ...
log.info:Magic has not been previously setup


/*
 * Retrieving all database from specified database type.
 */
log.info:Checking if database exists from before
.database-exists:bool:false
strings.concat
   .:magic.db.
   get-value:x:@.arguments/*/databaseType
   .:.databases
signal:x:-


/*
 * Checking if "magic_auth" was returned from above invocation, and
 * system does not have a non-default authentication database declared
 * in its configuration.
 */
if
   and
      eq
         config.get:"magic:auth:database"
         .:magic_auth
      not
         exists:x:@signal/*/*/=magic_auth
   .lambda


      /*
       * Making sure we inform outer layer that we are creating the database.
       */
      log.info:Database does not exist from before, hence we will try to create it


      /*
       * Database does not exist.
       *
       * Evaluating SQL script that creates our database, but first we must dynamically
       * determine which script to execute.
       */
      strings.concat
         .:/misc/
         get-value:x:@.arguments/*/databaseType
         .:/magic_auth.sql


      /*
       * Loading create database SQL script file, and replacing execution slots according
       * to which database type we're dealing with.
       */
      log.info:x:@strings.concat
      io.file.load:x:@strings.concat


      /*
       * Notice, for MS SQL we need to explicitly invoke [mssql.execute-batch] to
       * accommodate for "GO" statements and such.
       */
      .slot
      if
         eq
            get-value:x:@.arguments/*/databaseType
            .:mssql
         .lambda


            /*
             * MS SQL "batch" execute slot needed.
             */
            log.info:Executing Microsoft SQL Server batch script to create our authentication database
            set-value:x:@.slot
               .:mssql.execute-batch


      else


         /*
          * Any other type of database.
          */
         log.info:Executing SQL script to create database
         set-value:x:@.slot
            strings.concat
               get-value:x:@.arguments/*/databaseType
               .:.execute


      /*
       * Changing names of slots now according to which slot we should
       * use to connect to database, and which slot we should use to 
       * execute SQL schema script.
       */
      set-name:x:../**/xxx.connect
         strings.concat
            get-value:x:@.arguments/*/databaseType
            .:.connect
      set-name:x:../**/xxx.execute
         get-value:x:@.slot


      /*
       * Executing create database SQL script.
       *
       * Notice, we do not connect to a specific database schema,
       * since we rely upon the default connection string, hooking us up to whatever
       * is the default, for whatever type of database we're currently connecting to.
       */
      xxx.connect
         xxx.execute:x:@io.file.load
      log.info:Database was successfully created


else


   /*
    * Database already exists.
    */
   set-value:x:@.database-exists
      .:bool:true
   log.info:Authenitcation database already exists from before, or a custom database was used


/*
 * Trying to insert our root user.
 *
 * Notice, this will throw an exception if root user already exists.
 */
.user-exists:bool:false
try


   /*
    * Inserting the root user according to arguments given.
    */
   log.info:Trying to create our default root user in database
   strings.concat
      .:/misc/
      get-value:x:@.arguments/*/databaseType
      .:/create-user.hl
   io.file.load:x:@strings.concat
   hyper2lambda:x:-
   unwrap:x:+/*/*
   add:x:@hyper2lambda/*/.arguments
      .
         username:x:@.arguments/*/rootUsername
         password:x:@.arguments/*/rootPassword
         roles
            .:root
   eval:x:@hyper2lambda
   log.info:Root user was successfully created in database

.catch


   /*
    * Need to store the fact that we need to change user's password further down in file.
    */
   log.info:Exception occurred as we tried to create root user. User probably exists form before.
   if
      get-value:x:@.database-exists
      .lambda


         /*
          * Database already existed as we started out, implying
          * there was (probably) already a root user account in it
          * from before.
          */
         set-value:x:@.user-exists
            .:bool:true


/*
 * Now we have our auth database, and our initial root user, and we can start moving files around,
 * and modifying slots accordingly.
 *
 * First we start by moving our "authenticate" Hyperlambda file.
 */
log.info:"Creating backup of default authentication Hyperlambda file, which can be found in '/trash/magic.authenticate.hl' afterwards"
io.file.move:/modules/system/magic.startup/magic.authenticate.hl
   .:/trash/
strings.concat
   .:/misc/
   get-value:x:@.arguments/*/databaseType
   .:/magic.authenticate.hl
log.info:"Copying database specific 'magic.authenticate.hl' file to '/modules/system/magic.startup/' folder."
io.file.copy:x:@strings.concat
   .:/modules/system/magic.startup/


/*
 * Copying the database specific "change-password" file.
 */
log.info:"Copying database specific 'change-password.hl' file to '/modules/system/magic.startup/' folder"
strings.concat
   .:/misc/
   get-value:x:@.arguments/*/databaseType
   .:/magic.change-password.hl
io.file.copy:x:-
   .:/modules/system/magic.startup/


/*
 * Evaluating new authentication file, to update our slot.
 */
log.info:"Evaluating new database specific 'magic.authenticate.hl' file, to overwrite our old [magic.authenticate] slot"
io.file.load:/modules/system/magic.startup/magic.authenticate.hl
hyper2lambda:x:-
eval:x:@hyper2lambda


/*
 * Evaluating "change-password" file, to create our slot.
 */
log.info:"Evaluating new database specific 'magic.change-password.hl' file, to overwrite our old [magic.change-password] slot"
io.file.load:/modules/system/magic.startup/magic.change-password.hl
hyper2lambda:x:-
eval:x:@hyper2lambda


/*
 * Notice, if user already existed as we started out,
 * we need to change the password of the root user.
 */
if
   get-value:x:@.user-exists
   .lambda


      /*
       * Changing root user's password.
       */
      unwrap:x:+/*
      signal:magic.change-password
         password:x:@.arguments/*/rootPassword


/*
 * Returning success to caller.
 */
log.info:System was successfully setup, returning success to caller
return-nodes
   result:success
