
/*
 * Generate an HTTP REST generic SQL endpoint according to the given [.arguments].
 */
.arguments
   databaseType:string
   authorization:string
   database:string
   arguments:string
   verb:string
   endpointName:string
   sql:string
   overwrite:bool
   isStatistics:bool
.description:"Creates a custom SQL HTTP REST endpoint according to the instructions given in the arguments."


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Creating our endpoint according to arguments given, by using [apply]
 * on the [template] file given.
 */
io.file.load:/modules/system/crudifier/templates/sql.template.hl
hyper2lambda:x:-
unwrap:x:+/*
apply:x:@hyper2lambda
   database:x:@.arguments/*/database
   sql:x:@.arguments/*/sql


/*
 * Replacing generic slots with actual database type.
 */
for-each:x:@apply/**/wait.xxx.connect
   set-name:x:@.dp/#
      strings.concat
         .:wait.
         get-value:x:@.arguments/*/databaseType
         .:.connect
for-each:x:@apply/**/wait.xxx.select
   set-name:x:@.dp/#
      strings.concat
         .:wait.
         get-value:x:@.arguments/*/databaseType
         .:.select


/*
 * Making sure we add arguments to the above lambda.
 */
hyper2lambda:x:@.arguments/*/arguments
add:x:@apply/*/.arguments
   get-nodes:x:@hyper2lambda/*


/*
 * Checking if caller declared current endpoint as a "statistics" endpoint.
 */
if
   eq
      get-value:x:@.arguments/*/isStatistics
      .:bool:true
   .lambda


      /*
       * Making sure we mark endpoint as a statistics type of endpoint.
       */
      insert-before:x:@apply/*/.arguments
         .
            .is-statistics:bool:true


/*
 * Checking if caller provided specific authorization
 * for us to use, and if so, applying it to lambda.
 */
if
   and
      not
         eq
            get-value:x:@.arguments/*/authorization
            .:
      not
         eq
            get-value:x:@.arguments/*/authorization
            .
   .lambda


      /*
       * Adding authorization to endpoint's lambda.
       */
      unwrap:x:+/*/*
      insert-after:x:@apply/*/.arguments
         .
            auth.ticket.verify:x:@.arguments/*/authorization


/*
 * Creating our folder.
 */
.folder:/modules/
set-value:x:@.folder
   strings.concat
      get-value:x:@.folder
      get-value:x:@.arguments/*/database
      .:/
io.folder.create:x:@.folder


/*
 * Transforming above lambda to Hyperlambda, and figuring out filename.
 */
lambda2hyper:x:@apply/*
unwrap:x:+
.filename:x:@.folder
set-value:x:@.filename
   strings.concat
      get-value:x:@.filename
      get-value:x:@.arguments/*/endpointName
      .:.
      get-value:x:@.arguments/*/verb
      .:.hl


/*
 * Making sure file does not exist from before, unless [.argument][overwrite] is true.
 */
if
   and
      not
         get-value:x:@.arguments/*/overwrite
      io.file.exists:x:@.filename
   .lambda
      throw:"That module already exists. If you wish to re-create it, you'll first have to delete the existing folder with that name, inside of '/modules/'."


/*
 * Saving file.
 */
io.file.save:x:@.filename
   get-value:x:@lambda2hyper


/*
 * Returns success to caller.
 */
return-nodes
   result:success
