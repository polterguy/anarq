
/*
 * Returns the named task to caller.
 */
.arguments
   name:string
.description:"Returns the named task to caller."


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Retrieves the specified task from the task scheduler.
 */
scheduler.tasks.get:x:@.arguments/*/name


/*
 * Transforming task's lambda object to Hyperlambda.
 */
lambda2hyper:x:@scheduler.tasks.get/*/*/.lambda/*


/*
 * Checking what type of repetition pattern this task has, 
 * and returning to caller accordingly.
 */
if
   exists:x:@scheduler.tasks.get/*/*/repeat
   .lambda
      unwrap:x:+/*/*
      .add
         repeat
            interval:x:@scheduler.tasks.get/*/*/repeat
      add:x:../*/return-nodes
         get-nodes:x:@.add/*
      switch:x:@scheduler.tasks.get/*/*/repeat
         case:days
         case:hours
         case:minutes
         case:seconds
            unwrap:x:+/*
            .add
               value:x:@scheduler.tasks.get/*/*/repeat/*/value
            add:x:../*/return-nodes/*/repeat
               get-nodes:x:@.add/*
         default
            unwrap:x:+/*
            .add
               time:x:@scheduler.tasks.get/*/*/repeat/*/time
            add:x:../*/return-nodes/*/repeat
               get-nodes:x:@.add/*


/*
 * Returning the results of the evaluation to caller.
 */
unwrap:x:+/*
return-nodes
   name:x:@.arguments/*/name
   description:x:@scheduler.tasks.get/*/*/description
   due:x:@scheduler.tasks.get/*/*/due
   hyperlambda:x:@lambda2hyper
