
/*
 * Creates a new scheduled task according to the arguments specified.
 */
.arguments
   name:string
   description:string
   hyperlambda:string
   due:date
   repeat:string
.description:"Creates a new scheduled task according to the arguments specified."


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Converting Hyperlambda to lambda.
 */
hyper2lambda:x:@.arguments/*/hyperlambda


/*
 * Checking what type of repetition pattern, if any, this task has.
 */
if
   exists:x:@.arguments/*/due
   .lambda

      /*
       * Creating a [when] type of task.
       *
       * Sanity checking invocation.
       */
      if
         exists:x:@.arguments/*/repeat
         .lambda

            /*
             * Oops ...
             */
            throw:You cannot have both [when] and [repeat] arguments when creating a new task.

      /*
       * Creating a [when] type of task.
       *
       * First adding lambda to task.
       */
      add:x:./*/scheduler.tasks.create/*/.lambda
         get-nodes:x:@hyper2lambda/*

      /*
       * Unfortunately the [scheduler.tasks.create] requires
       * expressions to be forward evaluated.
       */
      unwrap:x:./*/scheduler.tasks.create
      unwrap:x:./*/scheduler.tasks.create/*/when
      unwrap:x:./*/scheduler.tasks.create/*/description

      /*
       * Actually creating our task.
       */
      scheduler.tasks.create:x:@.arguments/*/name
         when:x:@.arguments/*/due
         description:x:@.arguments/*/description
         .lambda

      /*
       * Returning success to caller.
       */
      return-nodes
         result:OK
         data:[when] type of task was successfully created.

else-if
   exists:x:@.arguments/*/repeat
   .lambda

      /*
       * Creating a [repeat] type of task.
       */
      switch:x:@.arguments/*/repeat/*/interval
         case:seconds
         case:minutes
         case:hours
         case:days

            /*
             * Unfortunately the [scheduler.tasks.create] requires
             * expressions to be forward evaluated.
             */
            unwrap:x:./*/scheduler.tasks.create
            unwrap:x:./*/scheduler.tasks.create/*/repeat
            unwrap:x:./*/scheduler.tasks.create/*/repeat/*/value
            unwrap:x:./*/scheduler.tasks.create/*/description

            /*
             * First adding lambda to task.
             */
            add:x:./*/scheduler.tasks.create/*/.lambda
               get-nodes:x:@hyper2lambda/*

            /*
             * Actually creating our task.
             */
            scheduler.tasks.create:x:@.arguments/*/name
               description:x:@.arguments/*/description
               repeat:x:@.arguments/*/repeat/*/interval
                  value:x:@.arguments/*/repeat/*/value
               .lambda

         case:Sunday
         case:Monday
         case:Tuesday
         case:Wednesday
         case:Thursday
         case:Friday
         case:Saturday
         case:last-day-of-month

            /*
             * Unfortunately the [scheduler.tasks.create] requires
             * expressions to be forward evaluated.
             */
            unwrap:x:./*/scheduler.tasks.create
            unwrap:x:./*/scheduler.tasks.create/*/repeat
            unwrap:x:./*/scheduler.tasks.create/*/repeat/*/time
            unwrap:x:./*/scheduler.tasks.create/*/description

            /*
             * First adding lambda to task.
             */
            add:x:./*/scheduler.tasks.create/*/.lambda
               get-nodes:x:@hyper2lambda/*

            /*
             * Actually creating our task.
             */
            scheduler.tasks.create:x:@.arguments/*/name
               description:x:@.arguments/*/description
               repeat:x:@.arguments/*/repeat/*/interval
                  time:x:@.arguments/*/repeat/*/time
               .lambda

         default

            /*
             * Unfortunately the [scheduler.tasks.create] requires
             * expressions to be forward evaluated.
             */
            unwrap:x:./*/scheduler.tasks.create
            unwrap:x:./*/scheduler.tasks.create/*/repeat
            unwrap:x:./*/scheduler.tasks.create/*/repeat/*/time
            unwrap:x:./*/scheduler.tasks.create/*/description

            /*
             * First adding lambda to task.
             */
            add:x:./*/scheduler.tasks.create/*/.lambda
               get-nodes:x:@hyper2lambda/*

            /*
             * Actually creating our task.
             */
            scheduler.tasks.create:x:@.arguments/*/name
               description:x:@.arguments/*/description
               repeat:x:@.arguments/*/repeat/*/interval
                  time:x:@.arguments/*/repeat/*/time
               .lambda

else

   /*
    * Not a valid repetition pattern for task.
    */
   throw:Either supply [when] or [repeat] arguments for your task.