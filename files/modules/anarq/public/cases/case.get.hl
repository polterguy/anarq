
/*
 * Retrieves one specific case from the system.
 *
 * Arguments:
 *
 * [id] - Mandatory argument, defining which case retrieve data for.
 */
.arguments
   id:string
validators.mandatory:x:@.arguments/*/id

/*
 * Doing some basic caching, basically caching for 30 seconds.
 *
 * The reasons we have such a short cache, is to allow for votes
 * casted in individual cases to reflect as fast as possible to the
 * frontend, to be visible for the end user ASAP.
 */
http.response.headers.add
   Cache-Control:private, max-age=30

/*
 * Opening database connection.
 */
wait.mysql.connect:magic

   /*
    * Selecting main case data.
    */
   wait.mysql.select:select body, created, deadline, region, subject, user, if(deadline > now(), false, true) as closed from cases where id = @id
      @id:x:@.arguments/*/id

   /*
    * Selecting votes for case.
    */
   wait.mysql.select:"select count(*) as positive from votes where `case` = @id and opinion = 1"
      @id:x:@.arguments/*/id
   wait.mysql.select:"select count(*) as negative from votes where `case` = @id and opinion = 0"
      @id:x:@.arguments/*/id

   /*
    * Returning above results to caller.
    */
   add:x:./*/return-nodes
      get-nodes:x:././*/wait.mysql.select/*/*

   /*
    * Checking if user is logged in, and if so,
    * returning votes given for this case, if any.
    */
   auth.ticket.get
   wait.if
      not
         eq
            get-value:x:@auth.ticket.get
            .
      .lambda
         wait.mysql.select:"select opinion from votes where `case` = @id and user = @user"
            @id:x:@.arguments/*/id
            @user:x:@auth.ticket.get
         add:x:@wait.mysql.connect/*/return-nodes
            get-nodes:x:@wait.mysql.select/*/*

   /*
    * Returning results to caller.
    */
   return-nodes
