

/*
 * Returns all cases that some user has explicitly created,
 * and have not been rejected for some reasons by a moderator.
 *
 * Arguments:
 *
 * [offset] - Optional offset to page items.
 * [username] - Optional user to retrieve cases for. If given, slot will only return cases within regions user is registered within.
 */
.arguments
   offset:long
   username:string
validators.mandatory:x:@.arguments/*/username
auth.ticket.get

/*
 * Doing some basic caching, basically caching for 3 minutes.
 */
http.response.headers.add
   Cache-Control:private, max-age=180

/*
 * Opening database connection.
 */
wait.mysql.connect:magic

   /*
    * Building SQL.
    */
   .sql:@"
select c.id, c.region, c.deadline, c.subject,
	(select count(*) from votes v where v.case = c.id) as votes,
   (select count(*) from votes v where v.case = c.id and v.opinion = 1) as positive "

   /*
    * Checking if user is authenticated, at which point we return
    * whether or not user has voted for the case or not.
    */
   if
      not
         eq
            get-value:x:@auth.ticket.get
            .
      .lambda

         /*
          * User is authenticated, hence returning whether or not he
          * voted for the case or not.
          */
         set-value:x:@.sql
            strings.concat
               get-value:x:@.sql
               .:", exists (select * from votes v where v.case = c.id and v.user = @user) as voted "
         add:x:@.sql
            .
               @user:x:@auth.ticket.get

   /*
    * Appending rest of SQL.
    */
   set-value:x:@.sql
      strings.concat
         get-value:x:@.sql
         .:@"from cases c
	where c.type != 'rejected' and
   c.user = @username
   order by votes desc limit 25"

   /*
    * Checking if caller provided an [offset].
    */
   if
      exists:x:@.arguments/*/offset
      .lambda
         set-value:x:@.sql
            strings.concat
               get-value:x:@.sql
               .:" and offset > "
               get-value:x:@.arguments/*/offset

   /*
    * Executing SQL.
    */
   add:x:./*/wait.mysql.select
      get-nodes:x:@.sql/*
   wait.mysql.select:x:@.sql
      @username:x:@.arguments/*/username

   /*
    * Returning above results to caller.
    */
   add:x:./*/return-nodes
      get-nodes:x:@wait.mysql.select/*

   /*
    * Returning results to caller.
    */
   return-nodes
