
/*
 * Sends the user a "reset password link", if user exists in the system.
 *
 * Arguments:
 *
 * [email] - Mandatory argument, is the email address of the registered user.
 */
.arguments
   email:string

/*
 * Sanity checking invocation.
 */
validators.mandatory:x:@.arguments/*/email
validators.email:x:@.arguments/*/email

/*
 * Opening database connection, and selecting user from database.
 */
wait.mysql.connect:anarq

   /*
    * Checking if email is already registered.
    */
   wait.mysql.select:@"select
   ue1.value as email,
   ue1.user as username,
   ue2.value as full_name,
   ue3.value as language
   from users_extra ue1
      inner join users_extra ue2 on ue1.user = ue2.user
      inner join users_extra ue3 on ue1.user = ue3.user
   where ue1.type = 'email' and
      ue1.value = @email and
      ue2.type = 'full_name' and
      ue3.type = 'language'"
      @email:x:@.arguments/*/email
   if
      not
         exists:x:@wait.mysql.select/*/*
      .lambda

         /*
          * No such user.
          */
         return
            result:FAILURE
            extra:NoSuchUserFound

   wait.else

      /*
       * Sending user a "reset password link" to the email address
       * used when registering the user at the website.
       */
      config.get:"anarq:secret"
      strings.concat
         get-value:x:@wait.mysql.select/*/*/username
         get-value:x:@config.get
      crypto.hash:x:@strings.concat
      unwrap:x:+/*
      wait.signal:wait.anarq.emails.send.reset-password
         hash:x:@crypto.hash
         full_name:x:@wait.mysql.select/*/*/full_name
         username:x:@wait.mysql.select/*/*/username
         language:x:@wait.mysql.select/*/*/language
         email:x:@.arguments/*/email
      return
         result:SUCCESS
         extra:WeHaveSentResetPasswordLink
