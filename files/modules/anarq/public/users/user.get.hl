
/*
 * Retrieves one specific user from the system.
 *
 * Arguments:
 *
 * [username] - Mandatory argument, defining which user to retrieve data for.
 */
.arguments
   username:string

/*
 * Sanity checking invocation.
 */
validators.mandatory:x:@.arguments/*/username

/*
 * Doing some basic caching, basically caching for 3 minutes.
 */
http.response.headers.add
   Cache-Control:private, max-age=180

/*
 * Opening database connection, and selecting user from database.
 */
wait.mysql.connect:magic

   /*
    * Selecting user data first.
    */
   wait.mysql.select:@"select u.username, u.status,
   (select count(*) from votes v where v.case in (select id from cases c where c.user = u.username)) as votes
   from users u where u.username = @username"
      @username:x:@.arguments/*/username

   /*
    * Notice, only if user is in root, admin or moderator role, we return
    * name, phone number, and email address to caller.
    */
   auth.ticket.get
   wait.if
      or
         exists:x:@auth.ticket.get/*/=root
         exists:x:@auth.ticket.get/*/=admin
         exists:x:@auth.ticket.get/*/=moderator
      .lambda

         /*
          * Returning full_name, email and phone from users_extra
          */
         wait.mysql.select:"select value as name from users_extra where user = @username and type = 'full_name'"
            @username:x:@.arguments/*/username
         wait.mysql.select:"select value as phone from users_extra where user = @username and type = 'phone'"
            @username:x:@.arguments/*/username
         wait.mysql.select:"select value as email from users_extra where user = @username and type = 'email'"
            @username:x:@.arguments/*/username

   /*
    * Figuring out number of cases user has created,
    * both cases that have been accepted and rejected.
    */
   wait.mysql.select:@"select count(*) as cases from cases where user = @username and type != 'rejected'"
      @username:x:@.arguments/*/username

   /*
    * Figuring out number of cases user has won.
    */
   wait.mysql.select:@"select count(*) as won from cases c
   where c.user = @username and
   type != 'rejected' and
   (select count(v.id) from votes v where v.opinion = 1 and v.case = c.id) >
	(select count(v.id) from votes v where v.opinion = 0 and v.case = c.id) and 
   deadline < now()"
      @username:x:@.arguments/*/username

   /*
    * Figuring out number of cases user has lost.
    */
   wait.mysql.select:@"select count(*) as lost from cases c
   where c.user = @username and
   type != 'rejected' and
   (select count(v.id) from votes v where v.opinion = 1 and v.case = c.id) <
	(select count(v.id) from votes v where v.opinion = 0 and v.case = c.id) and 
   deadline < now()"
      @username:x:@.arguments/*/username

   /*
    * Figuring out number of cases user has created that were ties.
    */
   wait.mysql.select:@"select count(*) as tied from cases c
   where c.user = @username and
   type != 'rejected' and
   (select count(v.id) from votes v where v.opinion = 1 and v.case = c.id) =
	(select count(v.id) from votes v where v.opinion = 0 and v.case = c.id) and 
   deadline < now()"
      @username:x:@.arguments/*/username

   /*
    * Returning above results to caller.
    */
   add:x:./*/return-nodes
      get-nodes:x:././**/wait.mysql.select/*/*

   /*
    * Getting regions for user, and returning to caller.
    */
   wait.mysql.select:@"
select ur.region as name,
	(select count(v.id) from votes v
		inner join cases c on v.case = c.id
		where v.user = ur.user
			and c.region = ur.region) as votes
	from users_regions ur
    where ur.user = @username
    group by ur.region
    order by votes desc"
      @username:x:@.arguments/*/username

   /*
    * Appending regions to result.
    */
   add:x:+/*/*
      get-nodes:x:@wait.mysql.select/*
   add:x:./*/return-nodes
      .
         regions

   /*
    * Returning results to caller.
    */
   return-nodes
