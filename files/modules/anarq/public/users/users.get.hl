
/*
 * Retrieves users in the system, ordered by popularity.
 *
 * Arguments:
 *
 * [offset] - Mandatory argument, defining at what offset to start fetching items.
 * [filter] - Optional argument, defining a like filter.
 */
.arguments
   offset:long
   filter:string

/*
 * Sanity checking invocation.
 */
validators.mandatory:x:@.arguments/*/offset

/*
 * Doing some basic caching, basically caching for 3 minutes.
 */
http.response.headers.add
   Cache-Control:private, max-age=180

/*
 * Opening database connection, and selecting user from database.
 */
wait.mysql.connect:magic

   /*
    * Selecting user data first.
    */
   .sql:@"select u.username,
   (select count(*) from votes v where v.case in (select id from cases c where c.user = u.username)) as votes
   from users u "

   /*
    * Checking if we have a where condition.
    */
   if
      and
         exists:x:@.arguments/*/filter
         not
            eq
               get-value:x:@.arguments/*/filter
               .:
      .lambda
         set-value:x:@.sql
            strings.concat
               get-value:x:@.sql
               .:"where u.username like @filter"
         strings.concat
            get-value:x:@.arguments/*/filter
            .:%
         unwrap:x:+/*/*
         add:x:../*/wait.mysql.connect/*/wait.mysql.select
            .
               @filter:x:@strings.concat

   /*
    * Appending tail.
    */
   set-value:x:@.sql
      strings.concat
         get-value:x:@.sql
         .:@" order by votes desc limit 25 offset @offset"
   wait.mysql.select:x:@.sql
      @offset:x:@.arguments/*/offset

   /*
    * Returning above results to caller.
    */
   add:x:./*/return
      get-nodes:x:././**/wait.mysql.select/*

   /*
    * Returning results to caller.
    */
   return
