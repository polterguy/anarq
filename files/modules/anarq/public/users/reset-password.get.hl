
/*
 * Resets the password of specified user.
 *
 * Arguments:
 *
 * [username] - Mandatory argument, username of user to reset password of.
 * [newPassword] - Mandatory argument, new password for user.
 * [hash] - Mandatory argument, hash value as sent to user in reset password email.
 */
.arguments
   username:string
   hash:string
   newPassword:string

/*
 * Sanity checking invocation.
 */
validators.mandatory:x:@.arguments/*/username
validators.mandatory:x:@.arguments/*/hash
validators.mandatory:x:@.arguments/*/newPassword
validators.string:x:@.arguments/*/newPassword
   min:10

/*
 * Opening database connection, and selecting user from database.
 */
wait.mysql.connect:anarq

   /*
    * Checking that hash value is a match.
    */
   config.get:"anarq:secret"
   strings.concat
      get-value:x:@.arguments/*/username
      get-value:x:@config.get
   crypto.hash:x:@strings.concat
   if
      eq
         get-value:x:@.arguments/*/hash
         get-value:x:@crypto.hash
      .lambda

         /*
          * Hash match.
          */
         crypto.password.hash:x:@.arguments/*/newPassword
         mysql.execute:update users set password = @password where username = @username
            @password:x:@crypto.password.hash
            @username:x:@.arguments/*/username

   else
      return
         result:FAILURE
         extra:YouCannotChangePassword

/*
 * If we came this far, the password was successfully changed,
 * and we can authenticate user.
 */
unwrap:x:+/*
wait.signal:magic.authenticate
   username:x:@.arguments/*/username
   password:x:@.arguments/*/newPassword

/*
 * Returns the authentication JWT ticket created above to caller.
 */
unwrap:x:+/*
return
   result:SUCCESS
   extra:x:@wait.signal/*/ticket


