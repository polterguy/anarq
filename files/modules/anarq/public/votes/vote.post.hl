
/*
 * Votes yes or no for a specific case.
 *
 * Notice, case must be open, implying not past its deadline, and user
 * cannot have given his or her vote about the case previously.
 * User must also belong to the region where the case was created.
 *
 * Arguments:
 *
 * [id] - Mandatory argument, defining which case to vote for.
 * [vote] - Mandatory argument, defining which vote to give.
 */
.arguments
   id:long
   vote:bool

/*
 * Sanity checking invocation.
 */
auth.ticket.verify:user, admin, root, moderator
validators.mandatory:x:@.arguments/*/id
validators.mandatory:x:@.arguments/*/vote
auth.ticket.get

/*
 * Opening database connection.
 */
wait.mysql.connect:anarq

   /*
    * Asserting user is verified.
    */
   unwrap:x:+/*
   wait.signal:wait.anarq.user.is-verified
      username:x:@auth.ticket.get

   /*
    * Verifying user belongs to region.
    */
   wait.mysql.scalar:@"select count(*) from users_regions ur
   inner join cases c on ur.region = c.region
   where ur.user = @username and c.id = @id"
      @username:x:@auth.ticket.get
      @id:x:@.arguments/*/id
   if
      not
         eq
            get-value:x:@wait.mysql.scalar
            .:long:1
      .lambda
         return
            result:FAILURE
            extra:CannotVoteOutsideRegions

   /*
    * Verifying case is not closed.
    */
   wait.mysql.scalar:@"select count(*) from cases where id = @id and deadline > now()"
      @id:x:@.arguments/*/id
   if
      not
         eq
            get-value:x:@wait.mysql.scalar
            .:long:1
      .lambda
         return
            result:FAILURE
            extra:CasePastDeadline

   /*
    * Retrieving AnarQ secret, and making sure its valid (at least 50 characters long).
    */
   config.get:"anarq:secret"
   if
      lt
         strings.length:x:@config.get
         .:int:50
      .lambda
         throw:"Your 'anarq:secret' is too short. It must be at least 50 characters in length, to provide sufficient entropy to avoid brute force rainbow dictionary attacks guessing vote values."

   /*
    * Creating our semaphore, such that we can calculate hash for vote,
    * based upon previous vote's hash, or subject + body of case.
    */
   .old-hash
   .new-hash
   wait.semaphore:cast-vote

      /*
       * Verifying user has not already voted for case.
       *
       * Notice, this is done inside of the semaphore, to avoid the same
       * user voting twice in two rapidly created HTTP requests.
       */
      wait.mysql.scalar:"select count(*) from votes where `case` = @id and user = @username"
         @id:x:@.arguments/*/id
         @username:x:@auth.ticket.get
      if
         not
            eq
               get-value:x:@wait.mysql.scalar
               .:long:0
         .lambda
            return
               result:FAILURE
               extra:AlreadyVotedForCase

      /*
       * Calculating hash for vote.
       */
      wait.mysql.select:"select v.hash from votes v where v.case=@id order by v.id desc limit 1"
         @id:x:@.arguments/*/id
      wait.if
         not
            exists:x:@wait.mysql.select/*/*
         .lambda

            /*
             * This is the first vote for the case, hence we use the
             * subject + body to generate the first initial hash for the case.
             */
            wait.mysql.select:select subject, body from cases where id = @id
               @id:x:@.arguments/*/id
            strings.concat
               get-value:x:@wait.mysql.select/*/0
               get-value:x:@wait.mysql.select/*/1
            set-value:x:@.old-hash
               crypto.hash:x:@strings.concat
      else

         /*
          * This is not the first vote for the case, hence calculating hash
          * based upon previous votes for the same case.
          */
         set-value:x:@.old-hash
            get-value:x:@wait.mysql.select/*/*/hash

      /*
       * Calculating new hash based upon previous hash, plus the following
       * data from the current vote.
       *
       * 1. username
       * 2. vote
       * 3. datetime for vote
       * 4. secret from config file (to avoid brute force guessing of votes/usernames)
       *
       * new hash ==> hash(old-hash + '-' + username + '-' + vote + '-' + datetime + '-' + secret)
       */

      /*
       * Creating hash for newly given vote, based upon previous vote's hash,
       * and data for current vote.
       */
      date.now
         format:"yyyy-MM-ddTHH:mm:ss"
      strings.concat
         get-value:x:@.old-hash
         .:-
         get-value:x:@auth.ticket.get
         .:-
         get-value:x:@.arguments/*/vote
         .:-
         get-value:x:@date.now
         .:-
         get-value:x:@config.get
      set-value:x:@.new-hash
         crypto.hash:x:@strings.concat

      /*
       * Inserting vote for user.
       */
      wait.mysql.execute:"insert into votes (`case`, user, opinion, hash, created) values (@id, @username, @opinion, @hash, @created)"
         @id:x:@.arguments/*/id
         @username:x:@auth.ticket.get
         @opinion:x:@.arguments/*/vote
         @hash:x:@.new-hash
         @created:x:@date.now

   /*
    * Leaving semaphore ...
    *
    * Notice, even though the slot as a whole takes a fairly
    * long time to evaluate, due to sending an email receipt to user,
    * the actual semaphore is (probably) very short.
    */

   /*
    * Sending receipt to caller's email address, making sure we pass in
    * his language, full name, and email address.
    */
   wait.mysql.select:"select value as language from users_extra where user = @username and type = 'language'"
      @username:x:@auth.ticket.get
   wait.mysql.select:"select value as email from users_extra where user = @username and type = 'email'"
      @username:x:@auth.ticket.get
   wait.mysql.select:"select value as full_name from users_extra where user = @username and type = 'full_name'"
      @username:x:@auth.ticket.get
   unwrap:x:+/*
   wait.signal:wait.anarq.emails.send.vote-receipt
      old-hash:x:@.old-hash
      new-hash:x:@.new-hash
      id:x:@.arguments/*/id
      email:x:@wait.mysql.select/@wait.mysql.select/*/*
      full_name:x:@wait.mysql.select/*/*
      your_vote:x:@.arguments/*/vote
      language:x:@wait.mysql.select/@wait.mysql.select/@wait.mysql.select/*/*

   /*
    * Returning success to caller.
    */
   return-nodes
      result:SUCCESS
