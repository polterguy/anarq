
/*
 * Returns profile information for the specified user.
 */
.description:Returns profile information for the specified user
.arguments
   user:string


/*
 * Connecting to database
 */
data.connect:[generic|anarq]
   database-type:mysql


   /*
    * Invoking read slot.
    */
   data.read
      database-type:mysql
      table:user_details
      columns
         type
         content
      where
         and
            user.eq:x:@.arguments/*/user
            type.eq:full_name


   /*
    * Making sure user exists.
    */
   if
      not
         exists:x:@data.read/*/*
      .lambda
         response.status.set:404
         return-nodes
            result:No such user


   /*
    * Transforming result of above invocation to key/value collection to reduce bandwith usage,
    * and create a more semantically correct response.
    */
   for-each:x:@data.read/*

      // Buffer node.
      .to-add
         .foo

      // Creating key/value pair for above buffer node.
      set-name:x:@.to-add/0
         get-value:x:@.dp/#/*/type
      set-value:x:@.to-add/0
         get-value:x:@.dp/#/*/content

      // Adding above buffer node to return invocation below.
      insert-before:x:@data.connect/*/return-nodes/*/roles
         get-nodes:x:@.to-add/0


   /*
    * Retrieving meta data from users table in magic database.
    */
   data.connect:magic
      data.read
         table:users
         columns
            locked
            created
         where
            and
               username.eq:x:@auth.ticket.get
      data.read
         table:users_roles
         columns
            role
         where
            and
               user.eq:x:@.arguments/*/user


   /*
    * Adding meta information for user retrieved from magic database to return value.
    */
   insert-before:x:./*/return-nodes/*/roles
      get-nodes:x:@data.connect/*/data.read/[0,1]/*/*


   /*
    * Transforming result of above invocation to key/value collection to reduce bandwith usage,
    * and create a more semantically correct response.
    */
   for-each:x:@data.connect/*/data.read/[1,2]/*

      // Buffer node.
      .to-add
         .

      // Creating key/value pair for above buffer node.
      set-value:x:@.to-add/0
         get-value:x:@.dp/#/*/role

      // Adding above buffer node to return invocation below.
      add:x:@data.connect/@data.connect/*/return-nodes/*/roles
         get-nodes:x:@.to-add/0


   /*
    * Retrieving count of likes from user.
    */
   data.read
      database-type:mysql
      table:likes
      columns
         count(*)
            as:count
      where
         and
            user.eq:x:@.arguments/*/user


   /*
    * Retrieving comment count user has provided to system.
    */
   data.read
      database-type:mysql
      table:posts
      columns
         count(*)
            as:count
      where
         and
            user.eq:x:@.arguments/*/user
            parent.eq


   /*
    * Retrieving posts count user has provided to system.
    */
   data.read
      database-type:mysql
      table:posts
      columns
         count(*)
            as:count
      where
         and
            user.eq:x:@.arguments/*/user
            parent.eq


   /*
    * Retrieving how many likes user has received on his comments, and/or posts, making
    * sure we only count likes on posts that are more recent than 30 days.
    */
   math.subtract
      date.now
      time
         days:30
   data.read
      database-type:mysql
      table:likes
         as:l
         join:posts
            as:p
            type:left
            on
               and
                  l.post_id:p.id
      columns
         count(*)
            as:count
      where
         and
            p.user.eq:x:@.arguments/*/user
            p.created.mt:x:@math.subtract


   /*
    * Returning object in its entirety to caller.
    */
   unwrap:x:+/*
   return-nodes
      karma:x:@data.read/*/*
      licks:x:@data.read/@data.read/@data.read/@data.read/*/*
      comments:x:@data.read/@data.read/@data.read/*/*
      posts:x:@data.read/@data.read/*/*
      roles
